var searchIndex = [{ty:"mod",name:"",path:"rust-openssl",desc:""},{ty:"mod",name:"ssl",path:"rust-openssl",desc:""},{ty:"struct",name:"SslContext",path:"rust-openssl::ssl",desc:"An SSL context object"},{ty:"struct",name:"X509StoreContext",path:"rust-openssl::ssl",desc:""},{ty:"struct",name:"X509",path:"rust-openssl::ssl",desc:"A public key certificate"},{ty:"struct",name:"X509Name",path:"rust-openssl::ssl",desc:""},{ty:"struct",name:"SslStream",path:"rust-openssl::ssl",desc:"A stream wrapper which handles SSL encryption for an underlying stream."},{ty:"enum",name:"SslMethod",path:"rust-openssl::ssl",desc:"Determines the SSL method supported"},{ty:"variant",name:"Sslv3",path:"rust-openssl::ssl",desc:"Only support the SSLv3 protocol",parent:'1258'},{ty:"variant",name:"Tlsv1",path:"rust-openssl::ssl",desc:"Only support the TLSv1 protocol",parent:'1258'},{ty:"variant",name:"Sslv23",path:"rust-openssl::ssl",desc:"Support the SSLv2, SSLv3 and TLSv1 protocols",parent:'1258'},{ty:"enum",name:"SslVerifyMode",path:"rust-openssl::ssl",desc:"Determines the type of certificate verification used"},{ty:"variant",name:"SslVerifyPeer",path:"rust-openssl::ssl",desc:"Verify that the server's certificate is trusted",parent:'1287'},{ty:"variant",name:"SslVerifyNone",path:"rust-openssl::ssl",desc:"Do not verify the server's certificate",parent:'1287'},{ty:"enum",name:"X509NameFormat",path:"rust-openssl::ssl",desc:""},{ty:"variant",name:"Rfc2253",path:"rust-openssl::ssl",desc:"",parent:'1812'},{ty:"variant",name:"Oneline",path:"rust-openssl::ssl",desc:"",parent:'1812'},{ty:"variant",name:"Multiline",path:"rust-openssl::ssl",desc:"",parent:'1812'},{ty:"enum",name:"X509ValidationError",path:"rust-openssl::ssl",desc:""},{ty:"variant",name:"X509UnableToGetIssuerCert",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnableToGetCrl",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnableToDecryptCertSignature",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnableToDecryptCrlSignature",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnableToDecodeIssuerPublicKey",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509CertSignatureFailure",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509CrlSignatureFailure",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509CertNotYetValid",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509CertHasExpired",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509CrlNotYetValid",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509CrlHasExpired",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509ErrorInCertNotBeforeField",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509ErrorInCertNotAfterField",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509ErrorInCrlLastUpdateField",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509ErrorInCrlNextUpdateField",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509OutOfMem",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509DepthZeroSelfSignedCert",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509SelfSignedCertInChain",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnableToGetIssuerCertLocally",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnableToVerifyLeafSignature",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509CertChainTooLong",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509CertRevoked",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509InvalidCA",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509PathLengthExceeded",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509InvalidPurpose",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509CertUntrusted",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509CertRejected",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509SubjectIssuerMismatch",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509AkidSkidMismatch",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509AkidIssuerSerialMismatch",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509KeyusageNoCertsign",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnableToGetCrlIssuer",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnhandledCriticalExtension",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509KeyusageNoCrlSign",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnhandledCriticalCrlExtension",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509InvalidNonCA",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509ProxyPathLengthExceeded",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509KeyusageNoDigitalSignature",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509ProxyCertificatesNotAllowed",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509InvalidExtension",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509InavlidPolicyExtension",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509NoExplicitPolicy",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509DifferentCrlScope",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnsupportedExtensionFeature",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnnestedResource",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509PermittedVolation",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509ExcludedViolation",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509SubtreeMinmax",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnsupportedConstraintType",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnsupportedConstraintSyntax",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnsupportedNameSyntax",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509CrlPathValidationError",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509ApplicationVerification",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"variant",name:"X509UnknownError",path:"rust-openssl::ssl",desc:"",parent:'1819'},{ty:"mod",name:"error",path:"rust-openssl::ssl",desc:""},{ty:"enum",name:"SslError",path:"rust-openssl::ssl::error",desc:"An SSL error"},{ty:"variant",name:"StreamEof",path:"rust-openssl::ssl::error",desc:"The underlying stream has reported an EOF",parent:'37'},{ty:"variant",name:"SslSessionClosed",path:"rust-openssl::ssl::error",desc:"The SSL session has been closed by the other end",parent:'37'},{ty:"variant",name:"OpenSslErrors",path:"rust-openssl::ssl::error",desc:"An error in the OpenSSL library",parent:'37'},{ty:"enum",name:"OpensslError",path:"rust-openssl::ssl::error",desc:"An error from the OpenSSL library"},{ty:"variant",name:"UnknownError",path:"rust-openssl::ssl::error",desc:"An unknown error",parent:'92'},{ty:"structfield",name:"library",path:"rust-openssl::ssl::error::OpensslError",desc:"The library reporting the error",parent:'92'},{ty:"structfield",name:"function",path:"rust-openssl::ssl::error::OpensslError",desc:"The function reporting the error",parent:'92'},{ty:"structfield",name:"reason",path:"rust-openssl::ssl::error::OpensslError",desc:"The reason for the error",parent:'92'},{ty:"method",name:"to_str",path:"rust-openssl::ssl::error",desc:"",parent:'37'},{ty:"method",name:"to_str",path:"rust-openssl::ssl::error",desc:"",parent:'92'},{ty:"method",name:"get",path:"rust-openssl::ssl::error",desc:"Creates a new `OpenSslErrors` with the current contents of the error\nstack.",parent:'37'},{ty:"typedef",name:"VerifyCallback",path:"rust-openssl::ssl",desc:"The signature of functions that can be used to manually verify certificates"},{ty:"method",name:"drop",path:"rust-openssl::ssl",desc:"",parent:'1465'},{ty:"method",name:"try_new",path:"rust-openssl::ssl",desc:"Attempts to create a new SSL context.",parent:'1465'},{ty:"method",name:"new",path:"rust-openssl::ssl",desc:"A convenience wrapper around `try_new`.",parent:'1465'},{ty:"method",name:"set_verify",path:"rust-openssl::ssl",desc:"Configures the certificate verification method for new connections.",parent:'1465'},{ty:"method",name:"set_CA_file",path:"rust-openssl::ssl",desc:"Specifies the file that contains trusted CA certificates.",parent:'1465'},{ty:"method",name:"get_error",path:"rust-openssl::ssl",desc:"",parent:'1702'},{ty:"method",name:"get_current_cert",path:"rust-openssl::ssl",desc:"",parent:'1702'},{ty:"method",name:"subject_name",path:"rust-openssl::ssl",desc:"",parent:'1763'},{ty:"method",name:"drop",path:"rust-openssl::ssl",desc:"",parent:'2168'},{ty:"method",name:"from_i64",path:"rust-openssl::ssl",desc:"",parent:'2524'},{ty:"method",name:"from_u64",path:"rust-openssl::ssl",desc:"",parent:'2524'},{ty:"method",name:"drop",path:"rust-openssl::ssl",desc:"",parent:'2843'},{ty:"method",name:"try_new",path:"rust-openssl::ssl",desc:"Attempts to create a new SSL stream",parent:'3088'},{ty:"method",name:"new",path:"rust-openssl::ssl",desc:"A convenience wrapper around `try_new`.",parent:'3088'},{ty:"method",name:"read",path:"rust-openssl::ssl",desc:"",parent:'3088'},{ty:"method",name:"eof",path:"rust-openssl::ssl",desc:"",parent:'3088'},{ty:"method",name:"write",path:"rust-openssl::ssl",desc:"",parent:'3088'},{ty:"method",name:"flush",path:"rust-openssl::ssl",desc:"",parent:'3088'},{ty:"method",name:"inner",path:"rust-openssl::ssl",desc:"",parent:'3088'},{ty:"method",name:"inner_ref",path:"rust-openssl::ssl",desc:"",parent:'3088'},{ty:"method",name:"inner_mut_ref",path:"rust-openssl::ssl",desc:"",parent:'3088'},{ty:"mod",name:"crypto",path:"rust-openssl",desc:""},{ty:"mod",name:"hash",path:"rust-openssl::crypto",desc:""},{ty:"struct",name:"Hasher",path:"rust-openssl::crypto::hash",desc:""},{ty:"enum",name:"HashType",path:"rust-openssl::crypto::hash",desc:""},{ty:"variant",name:"MD5",path:"rust-openssl::crypto::hash",desc:"",parent:'3612'},{ty:"variant",name:"SHA1",path:"rust-openssl::crypto::hash",desc:"",parent:'3612'},{ty:"variant",name:"SHA224",path:"rust-openssl::crypto::hash",desc:"",parent:'3612'},{ty:"variant",name:"SHA256",path:"rust-openssl::crypto::hash",desc:"",parent:'3612'},{ty:"variant",name:"SHA384",path:"rust-openssl::crypto::hash",desc:"",parent:'3612'},{ty:"variant",name:"SHA512",path:"rust-openssl::crypto::hash",desc:"",parent:'3612'},{ty:"fn",name:"evpmd",path:"rust-openssl::crypto::hash",desc:""},{ty:"fn",name:"hash",path:"rust-openssl::crypto::hash",desc:"Hashes the supplied input data using hash t, returning the resulting hash\nvalue"},{ty:"typedef",name:"EVP_MD_CTX",path:"rust-openssl::crypto::hash",desc:""},{ty:"typedef",name:"EVP_MD",path:"rust-openssl::crypto::hash",desc:""},{ty:"method",name:"new",path:"rust-openssl::crypto::hash",desc:"",parent:'3747'},{ty:"method",name:"update",path:"rust-openssl::crypto::hash",desc:"Update this hasher with more input bytes",parent:'3747'},{ty:"method",name:"final",path:"rust-openssl::crypto::hash",desc:"Return the digest of all bytes added to this hasher since its last\ninitialization",parent:'3747'},{ty:"method",name:"drop",path:"rust-openssl::crypto::hash",desc:"",parent:'3747'},{ty:"mod",name:"hex",path:"rust-openssl::crypto",desc:""},{ty:"trait",name:"ToHex",path:"rust-openssl::crypto::hex",desc:""},{ty:"tymethod",name:"to_hex",path:"rust-openssl::crypto::hex",desc:"",parent:'3901'},{ty:"trait",name:"FromHex",path:"rust-openssl::crypto::hex",desc:""},{ty:"tymethod",name:"from_hex",path:"rust-openssl::crypto::hex",desc:"",parent:'4013'},{ty:"mod",name:"hmac",path:"rust-openssl::crypto",desc:""},{ty:"struct",name:"HMAC_CTX",path:"rust-openssl::crypto::hmac",desc:""},{ty:"structfield",name:"md",path:"rust-openssl::crypto::hmac",desc:"",parent:'4195'},{ty:"structfield",name:"md_ctx",path:"rust-openssl::crypto::hmac",desc:"",parent:'4195'},{ty:"structfield",name:"i_ctx",path:"rust-openssl::crypto::hmac",desc:"",parent:'4195'},{ty:"structfield",name:"o_ctx",path:"rust-openssl::crypto::hmac",desc:"",parent:'4195'},{ty:"structfield",name:"key_length",path:"rust-openssl::crypto::hmac",desc:"",parent:'4195'},{ty:"structfield",name:"key",path:"rust-openssl::crypto::hmac",desc:"",parent:'4195'},{ty:"struct",name:"HMAC",path:"rust-openssl::crypto::hmac",desc:""},{ty:"fn",name:"HMAC",path:"rust-openssl::crypto::hmac",desc:""},{ty:"method",name:"update",path:"rust-openssl::crypto::hmac",desc:"",parent:'4270'},{ty:"method",name:"final",path:"rust-openssl::crypto::hmac",desc:"",parent:'4270'},{ty:"mod",name:"pkcs5",path:"rust-openssl::crypto",desc:""},{ty:"fn",name:"pbkdf2_hmac_sha1",path:"rust-openssl::crypto::pkcs5",desc:"Derives a key from a password and salt using the PBKDF2-HMAC-SHA1 algorithm."},{ty:"mod",name:"pkey",path:"rust-openssl::crypto",desc:""},{ty:"struct",name:"PKey",path:"rust-openssl::crypto::pkey",desc:""},{ty:"enum",name:"Role",path:"rust-openssl::crypto::pkey",desc:"Represents a role an asymmetric key might be appropriate for."},{ty:"variant",name:"Encrypt",path:"rust-openssl::crypto::pkey",desc:"",parent:'5006'},{ty:"variant",name:"Decrypt",path:"rust-openssl::crypto::pkey",desc:"",parent:'5006'},{ty:"variant",name:"Sign",path:"rust-openssl::crypto::pkey",desc:"",parent:'5006'},{ty:"variant",name:"Verify",path:"rust-openssl::crypto::pkey",desc:"",parent:'5006'},{ty:"enum",name:"EncryptionPadding",path:"rust-openssl::crypto::pkey",desc:"Type of encryption padding to use."},{ty:"variant",name:"OAEP",path:"rust-openssl::crypto::pkey",desc:"",parent:'5011'},{ty:"variant",name:"PKCS1v15",path:"rust-openssl::crypto::pkey",desc:"",parent:'5011'},{ty:"typedef",name:"EVP_PKEY",path:"rust-openssl::crypto::pkey",desc:""},{ty:"typedef",name:"RSA",path:"rust-openssl::crypto::pkey",desc:""},{ty:"method",name:"new",path:"rust-openssl::crypto::pkey",desc:"",parent:'5058'},{ty:"method",name:"gen",path:"rust-openssl::crypto::pkey",desc:"",parent:'5058'},{ty:"method",name:"save_pub",path:"rust-openssl::crypto::pkey",desc:"Returns a serialized form of the public key, suitable for load_pub().",parent:'5058'},{ty:"method",name:"load_pub",path:"rust-openssl::crypto::pkey",desc:"Loads a serialized form of the public key, as produced by save_pub().",parent:'5058'},{ty:"method",name:"save_priv",path:"rust-openssl::crypto::pkey",desc:"Returns a serialized form of the public and private keys, suitable for\nload_priv().",parent:'5058'},{ty:"method",name:"load_priv",path:"rust-openssl::crypto::pkey",desc:"Loads a serialized form of the public and private keys, as produced by\nsave_priv().",parent:'5058'},{ty:"method",name:"size",path:"rust-openssl::crypto::pkey",desc:"Returns the size of the public key modulus.",parent:'5058'},{ty:"method",name:"can",path:"rust-openssl::crypto::pkey",desc:"Returns whether this pkey object can perform the specified role.",parent:'5058'},{ty:"method",name:"max_data",path:"rust-openssl::crypto::pkey",desc:"Returns the maximum amount of data that can be encrypted by an encrypt()\ncall.",parent:'5058'},{ty:"method",name:"encrypt_with_padding",path:"rust-openssl::crypto::pkey",desc:"",parent:'5058'},{ty:"method",name:"decrypt_with_padding",path:"rust-openssl::crypto::pkey",desc:"",parent:'5058'},{ty:"method",name:"encrypt",path:"rust-openssl::crypto::pkey",desc:"Encrypts data using OAEP padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",parent:'5058'},{ty:"method",name:"decrypt",path:"rust-openssl::crypto::pkey",desc:"Decrypts data, expecting OAEP padding, returning the decrypted data.",parent:'5058'},{ty:"method",name:"sign",path:"rust-openssl::crypto::pkey",desc:"Signs data, using OpenSSL's default scheme and sha256. Unlike encrypt(),\ncan process an arbitrary amount of data; returns the signature.",parent:'5058'},{ty:"method",name:"verify",path:"rust-openssl::crypto::pkey",desc:"Verifies a signature s (using OpenSSL's default scheme and sha256) on a\nmessage m. Returns true if the signature is valid, and false otherwise.",parent:'5058'},{ty:"method",name:"sign_with_hash",path:"rust-openssl::crypto::pkey",desc:"",parent:'5058'},{ty:"method",name:"verify_with_hash",path:"rust-openssl::crypto::pkey",desc:"",parent:'5058'},{ty:"method",name:"drop",path:"rust-openssl::crypto::pkey",desc:"",parent:'5058'},{ty:"mod",name:"rand",path:"rust-openssl::crypto",desc:""},{ty:"fn",name:"rand_bytes",path:"rust-openssl::crypto::rand",desc:""},{ty:"mod",name:"symm",path:"rust-openssl::crypto",desc:""},{ty:"struct",name:"Crypter",path:"rust-openssl::crypto::symm",desc:"Represents a symmetric cipher context."},{ty:"enum",name:"Mode",path:"rust-openssl::crypto::symm",desc:""},{ty:"variant",name:"Encrypt",path:"rust-openssl::crypto::symm",desc:"",parent:'6258'},{ty:"variant",name:"Decrypt",path:"rust-openssl::crypto::symm",desc:"",parent:'6258'},{ty:"enum",name:"Type",path:"rust-openssl::crypto::symm",desc:""},{ty:"variant",name:"AES_128_ECB",path:"rust-openssl::crypto::symm",desc:"",parent:'6261'},{ty:"variant",name:"AES_128_CBC",path:"rust-openssl::crypto::symm",desc:"",parent:'6261'},{ty:"variant",name:"AES_256_ECB",path:"rust-openssl::crypto::symm",desc:"",parent:'6261'},{ty:"variant",name:"AES_256_CBC",path:"rust-openssl::crypto::symm",desc:"",parent:'6261'},{ty:"variant",name:"RC4_128",path:"rust-openssl::crypto::symm",desc:"",parent:'6261'},{ty:"fn",name:"encrypt",path:"rust-openssl::crypto::symm",desc:"Encrypts data, using the specified crypter type in encrypt mode with the\nspecified key and iv; returns the resulting (encrypted) data."},{ty:"fn",name:"decrypt",path:"rust-openssl::crypto::symm",desc:"Decrypts data, using the specified crypter type in decrypt mode with the\nspecified key and iv; returns the resulting (decrypted) data."},{ty:"typedef",name:"EVP_CIPHER_CTX",path:"rust-openssl::crypto::symm",desc:""},{ty:"typedef",name:"EVP_CIPHER",path:"rust-openssl::crypto::symm",desc:""},{ty:"method",name:"new",path:"rust-openssl::crypto::symm",desc:"",parent:'6319'},{ty:"method",name:"pad",path:"rust-openssl::crypto::symm",desc:"Enables or disables padding. If padding is disabled, total amount of\ndata encrypted must be a multiple of block size.",parent:'6319'},{ty:"method",name:"init",path:"rust-openssl::crypto::symm",desc:"Initializes this crypter.",parent:'6319'},{ty:"method",name:"update",path:"rust-openssl::crypto::symm",desc:"Update this crypter with more data to encrypt or decrypt. Returns\nencrypted or decrypted bytes.",parent:'6319'},{ty:"method",name:"final",path:"rust-openssl::crypto::symm",desc:"Finish crypting. Returns the remaining partial block of output, if any.",parent:'6319'},{ty:"method",name:"drop",path:"rust-openssl::crypto::symm",desc:"",parent:'6319'}];var allPaths = {'6719':{type:'fn',name:'encrypt'},'1852':{type:'variant',name:'X509UnhandledCriticalExtension'},'3623':{type:'typedef',name:'EVP_MD'},'6259':{type:'variant',name:'Encrypt'},'6266':{type:'variant',name:'RC4_128'},'1829':{type:'variant',name:'X509CrlNotYetValid'},'4719':{type:'mod',name:'pkey'},'6154':{type:'typedef',name:'EVP_CIPHER'},'1859':{type:'variant',name:'X509InvalidExtension'},'3604':{type:'mod',name:'crypto'},'1452':{type:'typedef',name:'VerifyCallback'},'5012':{type:'variant',name:'OAEP'},'37':{type:'enum',name:'SslError'},'4277':{type:'fn',name:'HMAC'},'1838':{type:'variant',name:'X509UnableToGetIssuerCertLocally'},'3088':{type:'struct',name:'SslStream'},'3613':{type:'variant',name:'MD5'},'4195':{type:'struct',name:'HMAC_CTX'},'6263':{type:'variant',name:'AES_128_CBC'},'1822':{type:'variant',name:'X509UnableToDecryptCertSignature'},'1833':{type:'variant',name:'X509ErrorInCrlLastUpdateField'},'1862':{type:'variant',name:'X509DifferentCrlScope'},'3606':{type:'mod',name:'hash'},'6073':{type:'mod',name:'rand'},'1702':{type:'struct',name:'X509StoreContext'},'1832':{type:'variant',name:'X509ErrorInCertNotAfterField'},'1850':{type:'variant',name:'X509KeyusageNoCertsign'},'1819':{type:'enum',name:'X509ValidationError'},'1856':{type:'variant',name:'X509ProxyPathLengthExceeded'},'1842':{type:'variant',name:'X509InvalidCA'},'1868':{type:'variant',name:'X509UnsupportedConstraintType'},'1818':{type:'variant',name:'Multiline'},'1825':{type:'variant',name:'X509CertSignatureFailure'},'5058':{type:'struct',name:'PKey'},'38':{type:'variant',name:'StreamEof'},'6258':{type:'enum',name:'Mode'},'5011':{type:'enum',name:'EncryptionPadding'},'6265':{type:'variant',name:'AES_256_CBC'},'1828':{type:'variant',name:'X509CertHasExpired'},'1841':{type:'variant',name:'X509CertRevoked'},'1851':{type:'variant',name:'X509UnableToGetCrlIssuer'},'1854':{type:'variant',name:'X509UnhandledCriticalCrlExtension'},'1830':{type:'variant',name:'X509CrlHasExpired'},'1465':{type:'struct',name:'SslContext'},'3619':{type:'typedef',name:'EVP_MD_CTX'},'3901':{type:'trait',name:'ToHex'},'5008':{type:'variant',name:'Decrypt'},'1827':{type:'variant',name:'X509CertNotYetValid'},'1814':{type:'variant',name:'Rfc2253'},'6260':{type:'variant',name:'Decrypt'},'3867':{type:'fn',name:'hash'},'3616':{type:'variant',name:'SHA256'},'1836':{type:'variant',name:'X509DepthZeroSelfSignedCert'},'1849':{type:'variant',name:'X509AkidIssuerSerialMismatch'},'1867':{type:'variant',name:'X509SubtreeMinmax'},'1845':{type:'variant',name:'X509CertUntrusted'},'4468':{type:'mod',name:'pkcs5'},'1816':{type:'variant',name:'Oneline'},'3615':{type:'variant',name:'SHA224'},'6319':{type:'struct',name:'Crypter'},'6264':{type:'variant',name:'AES_256_ECB'},'4737':{type:'typedef',name:'EVP_PKEY'},'1812':{type:'enum',name:'X509NameFormat'},'1800':{type:'struct',name:'X509Name'},'6262':{type:'variant',name:'AES_128_ECB'},'1869':{type:'variant',name:'X509UnsupportedConstraintSyntax'},'102':{type:'variant',name:'UnknownError'},'1876':{type:'variant',name:'X509UnknownError'},'5':{type:'mod',name:'ssl'},'33':{type:'mod',name:'error'},'1872':{type:'variant',name:'X509ApplicationVerification'},'4270':{type:'struct',name:'HMAC'},'6780':{type:'fn',name:'decrypt'},'1858':{type:'variant',name:'X509ProxyCertificatesNotAllowed'},'1837':{type:'variant',name:'X509SelfSignedCertInChain'},'3898':{type:'mod',name:'hex'},'1820':{type:'variant',name:'X509UnableToGetIssuerCert'},'1870':{type:'variant',name:'X509UnsupportedNameSyntax'},'1843':{type:'variant',name:'X509PathLengthExceeded'},'1871':{type:'variant',name:'X509CrlPathValidationError'},'1865':{type:'variant',name:'X509PermittedVolation'},'4013':{type:'trait',name:'FromHex'},'1866':{type:'variant',name:'X509ExcludedViolation'},'4741':{type:'typedef',name:'RSA'},'1834':{type:'variant',name:'X509ErrorInCrlNextUpdateField'},'1291':{type:'variant',name:'SslVerifyNone'},'5010':{type:'variant',name:'Verify'},'5007':{type:'variant',name:'Encrypt'},'39':{type:'variant',name:'SslSessionClosed'},'1840':{type:'variant',name:'X509CertChainTooLong'},'3696':{type:'fn',name:'evpmd'},'1861':{type:'variant',name:'X509NoExplicitPolicy'},'6143':{type:'mod',name:'symm'},'6150':{type:'typedef',name:'EVP_CIPHER_CTX'},'1826':{type:'variant',name:'X509CrlSignatureFailure'},'6090':{type:'fn',name:'rand_bytes'},'1287':{type:'enum',name:'SslVerifyMode'},'5009':{type:'variant',name:'Sign'},'1864':{type:'variant',name:'X509UnnestedResource'},'5013':{type:'variant',name:'PKCS1v15'},'1824':{type:'variant',name:'X509UnableToDecodeIssuerPublicKey'},'6261':{type:'enum',name:'Type'},'1860':{type:'variant',name:'X509InavlidPolicyExtension'},'5006':{type:'enum',name:'Role'},'1847':{type:'variant',name:'X509SubjectIssuerMismatch'},'1831':{type:'variant',name:'X509ErrorInCertNotBeforeField'},'0':{type:'mod',name:'rust-openssl'},'1846':{type:'variant',name:'X509CertRejected'},'1258':{type:'enum',name:'SslMethod'},'1853':{type:'variant',name:'X509KeyusageNoCrlSign'},'3747':{type:'struct',name:'Hasher'},'3612':{type:'enum',name:'HashType'},'1855':{type:'variant',name:'X509InvalidNonCA'},'1848':{type:'variant',name:'X509AkidSkidMismatch'},'4186':{type:'mod',name:'hmac'},'92':{type:'enum',name:'OpensslError'},'4507':{type:'fn',name:'pbkdf2_hmac_sha1'},'1259':{type:'variant',name:'Sslv3'},'1844':{type:'variant',name:'X509InvalidPurpose'},'1839':{type:'variant',name:'X509UnableToVerifyLeafSignature'},'45':{type:'variant',name:'OpenSslErrors'},'3617':{type:'variant',name:'SHA384'},'1821':{type:'variant',name:'X509UnableToGetCrl'},'1857':{type:'variant',name:'X509KeyusageNoDigitalSignature'},'1863':{type:'variant',name:'X509UnsupportedExtensionFeature'},'1763':{type:'struct',name:'X509'},'1835':{type:'variant',name:'X509OutOfMem'},'1260':{type:'variant',name:'Tlsv1'},'3618':{type:'variant',name:'SHA512'},'1261':{type:'variant',name:'Sslv23'},'1289':{type:'variant',name:'SslVerifyPeer'},'1823':{type:'variant',name:'X509UnableToDecryptCrlSignature'},'3614':{type:'variant',name:'SHA1'}};